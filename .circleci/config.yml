version: 2.1
orbs:
  docker: circleci/docker@2.1.4

jobs:
  build:
    environment:
      TZ: "/usr/share/zoneinfo/America/Los_Angeles"
    docker:
      - image: cimg/python:3.9
    working_directory: /tmp/src/fmriprep-rodents
    steps:
      - checkout
      - run:
          name: Check whether build should be skipped
          command: |
            set -x +e
            COMMIT_MSG="$(git log --format='format:%s' -n 1 $CIRCLE_SHA1)"
            DOCBUILD="$(echo ${COMMIT_MSG} | grep -i -E '^docs?(\(\w+\))?:')"
            if [ -z "$CIRCLE_TAG" -a -n "$DOCBUILD" ]; then
              echo "Only docs build"
              circleci step halt
            fi
            
      - docker/install-docker-credential-helper
      - run:
          name: Docker authentication
          command: |
            if [[ -n $DOCKER_PAT ]]; then
              echo "$DOCKER_PAT" | docker login -u $DOCKER_USER --password-stdin
            fi

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Pull a base image if not cached
          no_output_timeout: 60m
          command: |
            images=$(docker images | grep fmriprep-rodents) || images=""
            if [[ "$images" == "" ]]; then
                docker pull nipreps/fmriprep-rodents:latest
            else
                echo $images
            fi

      - run:
          name: Build Docker image
          no_output_timeout: 60m
          command: |
            export PY3=$(pyenv versions | grep '3\.' |
                         sed -e 's/.* 3\./3./' -e 's/ .*//')
            pyenv local $PY3
            pip install "setuptools >= 40.8.0"

            # Get version, update files.
            THISVERSION=$( python3 setup.py --version )
            if [[ ${THISVERSION:0:1} == "0" ]] ; then
              echo "WARNING: latest git tag could not be found"
              echo "Please, make sure you fetch all tags from upstream with"
              echo "the command ``git fetch --tags --verbose`` and push"
              echo "them to your fork with ``git push origin --tags``"
            fi
            sed -i "s/title = {FMRIPrep}/title = {fMRIPrep-rodents ${CIRCLE_TAG:-$THISVERSION}}/" fprodents/data/boilerplate.bib

            # Build docker image
            make docker-build version="${CIRCLE_TAG:-$THISVERSION}"

      - persist_to_workspace:
          root: /tmp
          paths:
            - src/fmriprep-rodents

  get_data:
    docker:
      - image: continuumio/miniconda3:4.9.2-alpine
    working_directory: /tmp/data
    environment:
      - TEMPLATEFLOW_HOME: /tmp/templateflow
    steps:
      - restore_cache:
          keys:
            - env-v0-{{ .Branch }}-
            - env-v0-master-
            - env-v0-
      - run:
          name: Setup git-annex & DataLad
          command: |
            conda install -y -c anaconda -c conda-forge git-annex datalad
            python -m pip install --no-cache-dir -U datalad-osf
            git config --global user.name 'NiPreps Bot'
            git config --global user.email 'nipreps@gmail.com'
      - run:
          name: Setup TemplateFlow
          command: |
            python -m pip install --no-cache-dir -U templateflow
            python -c "from templateflow import api as tfapi; \
                       tfapi.get('Fischer344');"
      - save_cache:
          key: env-v0-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - /tmp/templateflow
            - /opt/conda

      - restore_cache:
          keys:
            - data-se-v0-{{ .Branch }}-{{ .Revision }}-
            - data-se-v0-{{ .Branch }}-
            - data-se-v0-master-
            - data-se-v0-
      - run:
          name: Install Rodent BOLD/SE dataset
          command: |
            datalad install -r https://github.com/nipreps-data/nirodents-bold-se.git
            datalad update -r --merge -d nirodents-bold-se/
            datalad get -J 2 -r -d nirodents-bold-se nirodents-bold-se/*
      - save_cache:
          key: data-se-v0-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
          paths:
            - /tmp/data/nirodents-bold-se

      - run:
          name: Store FreeSurfer license file
          command: |
            mkdir -p /tmp/fslicense
            cd /tmp/fslicense
            echo "cHJpbnRmICJrcnp5c3p0b2YuZ29yZ29sZXdza2lAZ21haWwuY29tXG41MTcyXG4gKkN2dW12RVYzelRmZ1xuRlM1Si8yYzFhZ2c0RVxuIiA+IGxpY2Vuc2UudHh0Cg==" | base64 -d | sh
      - run:
          name: Create Nipype config files
          command: |
            mkdir -p /tmp/config
            printf "[execution]\nstop_on_first_crash = true\n" > /tmp/config/nipype.cfg
            echo "poll_sleep_duration = 0.01" >> /tmp/config/nipype.cfg
            echo "hash_method = content" >> /tmp/config/nipype.cfg
      - persist_to_workspace:
          root: /tmp
          paths:
            - templateflow
            - fslicense
            - config/nipype.cfg

  smoke_test:
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
      resource_class: xlarge
    working_directory: /tmp/rodent-se
    environment:
      - FS_LICENSE: /tmp/fslicense/license.txt
      - DATASET: nirodents-bold-se
    steps:
      - checkout:
          path: /home/circleci/src/fmriprep-rodents
      - run:
          name: Check whether build should be skipped
          command: |
            cd /home/circleci/src/fmriprep-rodents
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -i -E '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Only docs build"
              circleci step halt
            fi
            if [[ "$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[skip[ _]?tests\]' )" != "" ]]; then
              echo "Skipping pytest job"
              circleci step halt
            fi

      - attach_workspace:
          at: /tmp

      - restore_cache:
          keys:
            - data-se-v0-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
            - data-se-v0-{{ .Branch }}-{{ .Revision }}-
            - data-se-v0-{{ .Branch }}-
            - data-se-v0-
      - restore_cache:
          keys:
            - nirodents-bold-se-anat-v01-{{ .Branch }}-{{ .Revision }}
            - nirodents-bold-se-anat-v01-{{ .Branch }}
            - nirodents-bold-se-anat-v01-master
            - nirodents-bold-se-anat-v01-
      - run:
          name: Run anatomical workflow on rodents
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/${DATASET}/work /tmp/${DATASET}/anatomical
            docker run -e FS_LICENSE=$FS_LICENSE -e FMRIPREP_DEV=1 --rm \
                -v /tmp/data/${DATASET}:/data \
                -v /tmp/${DATASET}/anatomical:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/config/nipype.cfg:/home/fmriprep/.nipype/nipype.cfg \
                -v /tmp/templateflow:/home/fmriprep/.cache/templateflow \
                -v /tmp/${DATASET}/work:/work \
                --user $(id -u):$(id -g) \
                nipreps/fmriprep-rodents:latest /data /out participant -vv \
                -w /work --sloppy --anat-only \
                --notrack --skip-bids-validation --omp-nthreads 8 --nprocs 8
      - store_artifacts:
          path: /tmp/nirodents-bold-se/anatomical
      - save_cache:
         key: nirodents-bold-se-anat-v01-{{ .Branch }}-{{ .Revision }}-{{ epoch }}
         paths:
            - /tmp/nirodents-bold-se/work

      - run:
          name: Run full BOLD workflow on rodents
          no_output_timeout: 2h
          command: |
            mkdir -p /tmp/${DATASET}/derivatives
            docker run -e FS_LICENSE=$FS_LICENSE -e FMRIPREP_DEV=1 --rm \
                -v /tmp/data/${DATASET}:/data \
                -v /tmp/${DATASET}/derivatives:/out \
                -v /tmp/fslicense/license.txt:/tmp/fslicense/license.txt:ro \
                -v /tmp/config/nipype.cfg:/home/fmriprep/.nipype/nipype.cfg \
                -v /tmp/templateflow:/home/fmriprep/.cache/templateflow \
                -v /tmp/${DATASET}/work:/work \
                --user $(id -u):$(id -g) \
                nipreps/fmriprep-rodents:latest /data /out participant -vv \
                -w /work --sloppy \
                --notrack --skip-bids-validation --omp-nthreads 2 --nprocs 2
      - store_artifacts:
          path: /tmp/nirodents-bold-se/derivatives

      - run:
          name: Clean working directory
          when: on_success
          command: |
            sudo rm -rf /tmp/nirodents-bold-se/work
      - run:
          name: Clean working directory
          when: on_fail
          command: |
            find /tmp/nirodents-bold-se/work \( -name "*.nii.gz" -or -name "*.nii" -or -name "*.gii" -or -name "*.h5" \) \
                -exec sh -c 'rm -f {}; touch {}' \;
      - store_artifacts:
          path: /tmp/nirodents-bold-se/work

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - get_data:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      - smoke_test:
          requires:
            - get_data
            - build
          filters:
            branches:
              ignore:
                - /docs?\/.*/
                - /tests?\/.*/
                - /docker\/.*/
            tags:
              only: /.*/

      # - test_pytest:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         ignore:
      #           - /docs?\/.*/
      #           - /docker\/.*/
      #       tags:
      #         only: /.*/

      # - build_docs:
      #     filters:
      #       branches:
      #         ignore:
      #           - /tests?\/.*/
      #           - /docker\/.*/
      #       tags:
      #         only: /.*/

      # - test_deploy_pypi:
      #     filters:
      #       branches:
      #         ignore:
      #           - /docs\/.*/
      #           - /docker\/.*/
      #       tags:
      #         only: /.*/


      # - deploy_docker_patches:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: /docker\/.*/

      # - deployable:
      #     requires:
      #       - test_deploy_pypi
      #       - test_pytest
      #       - build_docs
      #     filters:
      #       branches:
      #         only: master
      #       tags:
      #         only: /.*/

      # - deploy_docker:
      #     requires:
      #       - deployable
      #     filters:
      #       branches:
      #         only: master
      #       tags:
      #         only: /.*/

      # - deploy_pypi:
      #     requires:
      #       - deployable
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /.*/
